// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: mathlib.proto

package mathlib

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NumInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N1 float32 `protobuf:"fixed32,1,opt,name=n1,proto3" json:"n1,omitempty"`
	N2 float32 `protobuf:"fixed32,2,opt,name=n2,proto3" json:"n2,omitempty"`
}

func (x *NumInput) Reset() {
	*x = NumInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mathlib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumInput) ProtoMessage() {}

func (x *NumInput) ProtoReflect() protoreflect.Message {
	mi := &file_mathlib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumInput.ProtoReflect.Descriptor instead.
func (*NumInput) Descriptor() ([]byte, []int) {
	return file_mathlib_proto_rawDescGZIP(), []int{0}
}

func (x *NumInput) GetN1() float32 {
	if x != nil {
		return x.N1
	}
	return 0
}

func (x *NumInput) GetN2() float32 {
	if x != nil {
		return x.N2
	}
	return 0
}

type NumOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ans float32 `protobuf:"fixed32,1,opt,name=ans,proto3" json:"ans,omitempty"`
}

func (x *NumOutput) Reset() {
	*x = NumOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mathlib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumOutput) ProtoMessage() {}

func (x *NumOutput) ProtoReflect() protoreflect.Message {
	mi := &file_mathlib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumOutput.ProtoReflect.Descriptor instead.
func (*NumOutput) Descriptor() ([]byte, []int) {
	return file_mathlib_proto_rawDescGZIP(), []int{1}
}

func (x *NumOutput) GetAns() float32 {
	if x != nil {
		return x.Ans
	}
	return 0
}

var File_mathlib_proto protoreflect.FileDescriptor

var file_mathlib_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x68, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x61, 0x74, 0x68, 0x6c, 0x69, 0x62, 0x22, 0x2a, 0x0a, 0x08, 0x4e, 0x75, 0x6d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x02, 0x6e, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x02, 0x6e, 0x32, 0x22, 0x1d, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x61, 0x6e, 0x73, 0x32, 0x68, 0x0a, 0x04, 0x4d, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x03, 0x41,
	0x64, 0x64, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x68, 0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x75, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x74, 0x68, 0x6c, 0x69, 0x62, 0x2e,
	0x4e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x6d, 0x61, 0x74, 0x68, 0x6c, 0x69, 0x62,
	0x2e, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x74, 0x68,
	0x6c, 0x69, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mathlib_proto_rawDescOnce sync.Once
	file_mathlib_proto_rawDescData = file_mathlib_proto_rawDesc
)

func file_mathlib_proto_rawDescGZIP() []byte {
	file_mathlib_proto_rawDescOnce.Do(func() {
		file_mathlib_proto_rawDescData = protoimpl.X.CompressGZIP(file_mathlib_proto_rawDescData)
	})
	return file_mathlib_proto_rawDescData
}

var file_mathlib_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mathlib_proto_goTypes = []interface{}{
	(*NumInput)(nil),  // 0: mathlib.NumInput
	(*NumOutput)(nil), // 1: mathlib.NumOutput
}
var file_mathlib_proto_depIdxs = []int32{
	0, // 0: mathlib.Math.Add:input_type -> mathlib.NumInput
	0, // 1: mathlib.Math.Substract:input_type -> mathlib.NumInput
	1, // 2: mathlib.Math.Add:output_type -> mathlib.NumOutput
	1, // 3: mathlib.Math.Substract:output_type -> mathlib.NumOutput
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mathlib_proto_init() }
func file_mathlib_proto_init() {
	if File_mathlib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mathlib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mathlib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mathlib_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mathlib_proto_goTypes,
		DependencyIndexes: file_mathlib_proto_depIdxs,
		MessageInfos:      file_mathlib_proto_msgTypes,
	}.Build()
	File_mathlib_proto = out.File
	file_mathlib_proto_rawDesc = nil
	file_mathlib_proto_goTypes = nil
	file_mathlib_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathClient interface {
	Add(ctx context.Context, in *NumInput, opts ...grpc.CallOption) (*NumOutput, error)
	Substract(ctx context.Context, in *NumInput, opts ...grpc.CallOption) (*NumOutput, error)
}

type mathClient struct {
	cc grpc.ClientConnInterface
}

func NewMathClient(cc grpc.ClientConnInterface) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Add(ctx context.Context, in *NumInput, opts ...grpc.CallOption) (*NumOutput, error) {
	out := new(NumOutput)
	err := c.cc.Invoke(ctx, "/mathlib.Math/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathClient) Substract(ctx context.Context, in *NumInput, opts ...grpc.CallOption) (*NumOutput, error) {
	out := new(NumOutput)
	err := c.cc.Invoke(ctx, "/mathlib.Math/Substract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServer is the server API for Math service.
type MathServer interface {
	Add(context.Context, *NumInput) (*NumOutput, error)
	Substract(context.Context, *NumInput) (*NumOutput, error)
}

// UnimplementedMathServer can be embedded to have forward compatible implementations.
type UnimplementedMathServer struct {
}

func (*UnimplementedMathServer) Add(context.Context, *NumInput) (*NumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedMathServer) Substract(context.Context, *NumInput) (*NumOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Substract not implemented")
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mathlib.Math/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Add(ctx, req.(*NumInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Math_Substract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Substract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mathlib.Math/Substract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Substract(ctx, req.(*NumInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mathlib.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Math_Add_Handler,
		},
		{
			MethodName: "Substract",
			Handler:    _Math_Substract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mathlib.proto",
}
